// <auto-generated />
using System;
using AspNetExample.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspNetExample.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetExample.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Building")
                        .HasColumnType("integer");

                    b.Property<decimal>("Financing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", t =>
                        {
                            t.HasCheckConstraint("CK_Departments_Building", "\"Building\" BETWEEN 1 AND 5");

                            t.HasCheckConstraint("CK_Departments_Financing", "\"Financing\" >= 0");

                            t.HasCheckConstraint("CK_Departments_Name", "LENGTH(\"Name\") > 0");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Diseases", t =>
                        {
                            t.HasCheckConstraint("CK_Diseases_Name", "LENGTH(\"Name\") > 0");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasCheckConstraint("CK_Doctors_Name", "LENGTH(\"Name\") > 0");

                            t.HasCheckConstraint("CK_Doctors_Salary", "\"Salary\" > 0");

                            t.HasCheckConstraint("CK_Doctors_Surname", "LENGTH(\"Surname\") > 0");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.DoctorExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("integer");

                    b.Property<int>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("WardId");

                    b.ToTable("DoctorsExaminations", t =>
                        {
                            t.HasCheckConstraint("CK_DoctorsExaminations_Date", "\"Date\" <= CURRENT_TIMESTAMP");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Examinations", t =>
                        {
                            t.HasCheckConstraint("CK_Examinations_Name", "LENGTH(\"Name\") > 0");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Intern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Interns");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Wards", t =>
                        {
                            t.HasCheckConstraint("CK_Wards_Name", "LENGTH(\"Name\") > 0");

                            t.HasCheckConstraint("CK_Wards_Places", "\"Places\" > 0");
                        });
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.DoctorExamination", b =>
                {
                    b.HasOne("AspNetExample.Domain.Entities.Disease", "Disease")
                        .WithMany("DoctorsExaminations")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetExample.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorsExaminations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetExample.Domain.Entities.Examination", "Examination")
                        .WithMany("DoctorsExaminations")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetExample.Domain.Entities.Ward", "Ward")
                        .WithMany("DoctorsExaminations")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("Examination");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Intern", b =>
                {
                    b.HasOne("AspNetExample.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Interns")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Professor", b =>
                {
                    b.HasOne("AspNetExample.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Professors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AspNetExample.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetExample.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Ward", b =>
                {
                    b.HasOne("AspNetExample.Domain.Entities.Department", "Department")
                        .WithMany("Wards")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Department", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Disease", b =>
                {
                    b.Navigation("DoctorsExaminations");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorsExaminations");

                    b.Navigation("Interns");

                    b.Navigation("Professors");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Examination", b =>
                {
                    b.Navigation("DoctorsExaminations");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AspNetExample.Domain.Entities.Ward", b =>
                {
                    b.Navigation("DoctorsExaminations");
                });
#pragma warning restore 612, 618
        }
    }
}
